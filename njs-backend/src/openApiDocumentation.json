{
  "openapi": "3.0.3",
  "info": {
    "title": "DCCMDB",
    "version": "2.2"
  },
  "servers": [
    {
      "url": "http://{servername}/",
      "description": "Node server (dev)",
      "variables": {
        "servername": {
          "description": "name of the server",
          "default": "localhost:8000"
        }
      }
    },
    {
      "url": "https://{servername}/",
      "description": "Node server (production)",
      "variables": {
        "servername": {
          "description": "name of the server",
          "default": "cmdb-backend"
        }
      }
    }
  ],
  "paths": {
    "/login": {
      "get": {
        "summary": "Get configured authentication method",
        "security": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "maxLength": 4,
                  "pattern": "^[a-z]+$",
                  "description": "Configured authentication method"
                },
                "examples": {
                  "jwt": {
                    "summary": "JSON Web Token",
                    "value": "jwt"
                  },
                  "ntlm": {
                    "summary": "Windows NTLM authentication",
                    "value": "ntlm"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1login/post/responses/401/content/application~1json/schema"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Authenticate with username and password for JWT. Only available if JWT is the configured method.",
        "security": [],
        "requestBody": {
          "description": "Authentication data",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "accountName": {
                    "type": "string",
                    "maxLength": 1000,
                    "pattern": "^.*$"
                  },
                  "passphrase": {
                    "type": "string",
                    "maxLength": 1000,
                    "pattern": "^.*$",
                    "format": "complex password",
                    "description": "(Only required for JWT): Passphrase for the user"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "JWT token",
                      "maxLength": 1000,
                      "pattern": "^.*$"
                    },
                    "userName": {
                      "$ref": "#/paths/~1login/post/requestBody/content/application~1json/schema/properties/accountName"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request or validation errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error object that enumerates all validation errors",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "message": {
                      "type": "string",
                      "maxLength": 1000,
                      "pattern": "^.*$",
                      "description": "Main error message"
                    },
                    "data": {
                      "type": "object",
                      "description": "Detailed errors",
                      "additionalProperties": false,
                      "properties": {
                        "errors": {
                          "type": "array",
                          "additionalProperties": false,
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "value": {
                                "type": "string",
                                "maxLength": 1000,
                                "pattern": "^.*$",
                                "description": "Problematic value that was sent"
                              },
                              "msg": {
                                "type": "string",
                                "maxLength": 1000,
                                "pattern": "^.*$",
                                "description": "Validation error message"
                              },
                              "param": {
                                "type": "string",
                                "maxLength": 1000,
                                "pattern": "^.*$",
                                "description": "Parameter name with validation problem"
                              },
                              "location": {
                                "type": "string",
                                "enum": [
                                  "body",
                                  "path",
                                  "params"
                                ],
                                "description": "Location of the parameter"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "invalid username or password",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An error object with a message",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "message": {
                      "type": "string",
                      "maxLength": 1000,
                      "pattern": "^.*$",
                      "description": "Main error message"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "unsupported media type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "maxLength": 1000,
                  "pattern": "^.*$"
                }
              }
            }
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/attributegroup": {
      "post": {
        "summary": "Create a new attribute group",
        "requestBody": {
          "description": "Data for the new attribute group",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "An attribute group object that handles multiple attribute types, without id, for creating.",
                "type": "object",
                "additionalProperties": true,
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 255,
                    "pattern": "^.*$",
                    "description": "Unique name of the attribute group"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1attributegroup~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/attributegroup/{id}": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Get a single attribute group by id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1attributegroup~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      },
      "put": {
        "summary": "Update the attribute group",
        "requestBody": {
          "description": "Atribute group to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "An attribute group object that handles multiple attribute types.",
                "allOf": [
                  {
                    "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/put/requestBody/content/application~1json/schema/allOf/0"
                  },
                  {
                    "$ref": "#/paths/~1rest~1attributegroup/post/requestBody/content/application~1json/schema"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1attributegroup~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "304": {
            "description": "nothing changed"
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Delete the attribute group",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1attributegroup~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/attributegroup/{id}/ItemType{itemTypeId}/CountAttributes": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        },
        {
          "$ref": "#/paths/~1rest~1configurationitem~1type~1%7BitemTypeId%7D~1name~1%7Bname%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Count attributes that exists in items of the given item type and where the attribute types are in the given attribute groups",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/paths/~1rest~1attributetype~1%7Bid%7D~1attributes~1count/get/responses/200/content/text~1plain/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/attributegroup/{id}/candelete": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Check, if the given attribute group can be deleted (i. e. is not used in any other context)",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D~1candelete/get/responses/200/content/text~1plain/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/attributegroups": {
      "get": {
        "summary": "Returns all attribute group objects as an array",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "additionalProperties": false,
                  "items": {
                    "$ref": "#/paths/~1rest~1attributegroup~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/attributegroups/inItemType/{id}": {
      "get": {
        "summary": "Return all attribute group objects that belong to a given item type as an array",
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1attributegroups/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/attributegroups/notInItemType/{id}": {
      "get": {
        "summary": "Return all attribute group objects that do not belong to the given item type as an array",
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1attributegroups/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/attributetype": {
      "post": {
        "summary": "Create a new attribute type",
        "requestBody": {
          "description": "Data for the new attribute type",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "An attribute type object for creating.",
                "type": "object",
                "additionalProperties": true,
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 255,
                    "pattern": "^.*$",
                    "description": "Unique name of the attribute type"
                  },
                  "attributeGroupId": {
                    "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                    "description": "id of the attribute group to which the attribute type belongs"
                  },
                  "validationExpression": {
                    "type": "string",
                    "maxLength": 1000,
                    "pattern": "^.*$",
                    "format": "regular expression",
                    "description": "Regular expression that is used for validation of attribute values"
                  }
                },
                "required": [
                  "name",
                  "attributeGroupId",
                  "validationExpression"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1attributetype~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/attributetype/{id}": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Get a single attribute type by id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1attributetype~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      },
      "put": {
        "summary": "Update the attribute type",
        "requestBody": {
          "description": "Updated attribute type",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "An attribute type object.",
                "allOf": [
                  {
                    "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/put/requestBody/content/application~1json/schema/allOf/0"
                  },
                  {
                    "$ref": "#/paths/~1rest~1attributetype/post/requestBody/content/application~1json/schema"
                  },
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "attributeGroupName": {
                        "$ref": "#/paths/~1rest~1itemtype/post/requestBody/content/application~1json/schema/properties/name"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1attributetype~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "304": {
            "description": "nothing changed"
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Delete the attribute type",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1attributetype~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/attributetype/{id}/converttoitemtype": {
      "post": {
        "summary": "Convert attribute type to item type and migrate all attributes of that type to items",
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
          }
        ],
        "requestBody": {
          "description": "Updated attribute type",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "Data needed for migrating an attribute type into an item type. If the name is not set, the name of the attribute type will be used instead.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "newItemTypeName": {
                    "$ref": "#/paths/~1rest~1itemtype/post/requestBody/content/application~1json/schema/properties/name"
                  },
                  "backColor": {
                    "description": "Background color of the new item type.",
                    "$ref": "#/paths/~1rest~1itemtype/post/requestBody/content/application~1json/schema/properties/backColor"
                  },
                  "connectionTypeId": {
                    "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                    "description": "Id of the connections type to use when creating new connection rules."
                  },
                  "position": {
                    "type": "string",
                    "description": "The position of the new item in connections to the processed items",
                    "enum": [
                      "above",
                      "below"
                    ]
                  },
                  "attributeTypesToTransfer": {
                    "type": "array",
                    "description": "Ids of attributes types that will be transferred to the new item type while processing",
                    "items": {
                      "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/put/requestBody/content/application~1json/schema/allOf/0"
                    }
                  }
                },
                "required": [
                  "backColor",
                  "connectionTypeId",
                  "position"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Results of processing the migration",
                  "additionalProperties": false,
                  "properties": {
                    "itemType": {
                      "description": "Item type that was created or used in process",
                      "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                    },
                    "items": {
                      "type": "array",
                      "description": "Items that were changed in process",
                      "items": {
                        "$ref": "#/paths/~1rest~1configurationItem~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                      }
                    },
                    "connections": {
                      "type": "array",
                      "description": "Connections that were created while processing request",
                      "items": {
                        "$ref": "#/paths/~1rest~1connection/post/responses/201/content/application~1json/schema"
                      }
                    },
                    "deletedAttributeType": {
                      "description": "Attribute type that was deleted at the end of the process",
                      "$ref": "#/paths/~1rest~1attributetype~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/attributetype/{id}/candelete": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Check, if the given attribute type can be deleted (i. e. is not used in any other context)",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D~1candelete/get/responses/200/content/text~1plain/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/attributetype/{id}/attributes/count": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Returns the number of existing attributes of the given attribute type",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of elements found"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/attributetype/{id}/correspondingValuesOfType": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Returns those attribute types whose values are coherent to the values of the given attribute type and can therefore be migrated together with the attribute type",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1attributetypes/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/attributetypes": {
      "get": {
        "summary": "Return all attribute type objects as an array",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "additionalProperties": false,
                  "items": {
                    "$ref": "#/paths/~1rest~1attributetype~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/attributetypes/forGroup/{id}": {
      "get": {
        "summary": "Return all attribute type objects that belong to the given attribute group as an array",
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1attributetypes/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/attributetypes/forItemType/{id}": {
      "get": {
        "summary": "Return all attribute type objects that belong to the given item type as an array",
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1attributetypes/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/connectiontype": {
      "post": {
        "summary": "Create a new connection type",
        "requestBody": {
          "description": "Data for the new connection type",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "A connection type object for creating.",
                "type": "object",
                "additionalProperties": true,
                "properties": {
                  "name": {
                    "$ref": "#/paths/~1rest~1itemtype/post/requestBody/content/application~1json/schema/properties/name",
                    "description": "Unique name of the connection type when viewing from the upper item"
                  },
                  "reverseName": {
                    "$ref": "#/paths/~1rest~1itemtype/post/requestBody/content/application~1json/schema/properties/name",
                    "description": "Name of the connection type when viewing from the lower item"
                  }
                },
                "required": [
                  "name",
                  "reverseName"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1connectiontype~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/connectiontype/{id}": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Get a single connection type by id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1connectiontype~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      },
      "put": {
        "summary": "Update the connection type",
        "requestBody": {
          "description": "Updated connection type",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "A connection type object.",
                "allOf": [
                  {
                    "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/put/requestBody/content/application~1json/schema/allOf/0"
                  },
                  {
                    "$ref": "#/paths/~1rest~1connectiontype/post/requestBody/content/application~1json/schema"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1connectiontype~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "304": {
            "description": "nothing changed"
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Delete the connection type",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1connectiontype~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/connectiontype/{id}/candelete": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Check, if the given connection type can be deleted (i. e. is not used in any other context)",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D~1candelete/get/responses/200/content/text~1plain/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/connectiontypes": {
      "get": {
        "summary": "Return all connection type objects as an array",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "additionalProperties": false,
                  "items": {
                    "$ref": "#/paths/~1rest~1connectiontype~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/AllowedDownward/itemtype/{id}": {
      "get": {
        "summary": "Return all connection type objects that can be used with the given item type as upper item type",
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1connectiontypes/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/itemtype": {
      "post": {
        "summary": "Create a new item type",
        "requestBody": {
          "description": "Data for the new item type",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "An item type object for creation.",
                "type": "object",
                "additionalProperties": true,
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 255,
                    "pattern": "^.*$",
                    "description": "Unique name of the meta data element"
                  },
                  "backColor": {
                    "type": "string",
                    "maxLength": 7,
                    "format": "color code",
                    "pattern": "^#[A-F0-9]{6}$",
                    "description": "Color code of an item type"
                  },
                  "attributeGroups": {
                    "type": "array",
                    "description": "Attribute groups that are mapped to the item type",
                    "items": {
                      "$ref": "#/paths/~1rest~1attributegroup~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                    }
                  }
                },
                "required": [
                  "name",
                  "backColor"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/itemtype/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Id of the object",
          "schema": {
            "type": "string",
            "maxLength": 24,
            "pattern": "^[a-f0-9]*$",
            "format": "mongo id",
            "description": "Unique id"
          }
        }
      ],
      "get": {
        "summary": "Get a single item type by id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      },
      "put": {
        "summary": "Update the item type",
        "requestBody": {
          "description": "Updated item type",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "An item type object.",
                "allOf": [
                  {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                      "id": {
                        "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
                      }
                    },
                    "required": [
                      "id"
                    ]
                  },
                  {
                    "$ref": "#/paths/~1rest~1itemtype/post/requestBody/content/application~1json/schema"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "304": {
            "description": "nothing changed"
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Delete the item type",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/itemtype/{id}/candelete": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Check, if the given item type can be deleted (i. e. is not used in any other context)",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "true",
                    "false"
                  ],
                  "description": "true, if there are no obstacles, false if there are elements of the type"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/itemtypes": {
      "get": {
        "summary": "Returns an array with all item types.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "additionalProperties": false,
                  "items": {
                    "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/itemtypes/forUpper/{id}/connectionType/{connectionType}": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        },
        {
          "name": "connectionType",
          "in": "path",
          "required": true,
          "description": "Id of the connection type",
          "schema": {
            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
          }
        }
      ],
      "get": {
        "summary": "Returns the lower item types, that are allowed to be connected to for a given upper item type and connection type, in an array",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1itemtypes/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/itemtypes/forLower/{id}/connectionType/{connectionType}": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        },
        {
          "$ref": "#/paths/~1rest~1itemtypes~1forUpper~1%7Bid%7D~1connectionType~1%7BconnectionType%7D/parameters/1"
        }
      ],
      "get": {
        "summary": "Returns the uppwer item types, that are allowed to be connected to for a given lowper item type and connection type, in an array",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1itemtypes/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/itemtypes/byAllowedAttributeType/{id}": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Returns the item types, that have the same attribute group mapped as the given attribute type",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1itemtypes/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/connectionrule": {
      "post": {
        "summary": "Create a new connection rule",
        "requestBody": {
          "description": "Data for the new connection rule",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "A connection rule object for creating. It allows connections between items of two different types.",
                "type": "object",
                "additionalProperties": true,
                "properties": {
                  "upperItemTypeId": {
                    "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                    "description": "Unique id of the item type in the upper position"
                  },
                  "connectionTypeId": {
                    "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                    "description": "Unique id of the connection type"
                  },
                  "lowerItemTypeId": {
                    "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                    "description": "Unique id of the item type in the lower position"
                  },
                  "maxConnectionsToUpper": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 9999,
                    "description": "Maximum nunber of connections, that an item of the lower type can have with items of the upper type"
                  },
                  "maxConnectionsToLower": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 9999,
                    "description": "Maximum nunber of connections, that an item of the upper type can have with items of the lower type"
                  },
                  "validationExpression": {
                    "type": "string",
                    "maxLength": 1000,
                    "pattern": "^.*$",
                    "format": "regular expression",
                    "description": "Regular expression that is used for validation of attribute values"
                  }
                },
                "required": [
                  "upperItemTypeId",
                  "lowerItemTypeId",
                  "connectionTypeId",
                  "maxConnectionsToUpper",
                  "maxConnectionsToLower",
                  "validationExpression"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1connectionrule~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/connectionrule/{id}": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Get a single connection rule by id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1connectionrule~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      },
      "put": {
        "summary": "Update the connection rule",
        "requestBody": {
          "description": "Updated connection rule",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "A connection rule object. It allows connections between items of two different types.",
                "allOf": [
                  {
                    "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/put/requestBody/content/application~1json/schema/allOf/0"
                  },
                  {
                    "$ref": "#/paths/~1rest~1connectionrule/post/requestBody/content/application~1json/schema"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1connectionrule~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "304": {
            "description": "nothing changed"
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "409": {
            "description": "conflict with existing entities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1login/post/responses/401/content/application~1json/schema"
                }
              }
            }
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Delete the connection rule",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1connectionrule~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/connectionrule/{id}/candelete": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Check, if the given connection rule can be deleted (i. e. is not used in any other context)",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D~1candelete/get/responses/200/content/text~1plain/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/connectionrule/{id}/connections/count": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Returns the number of existing connections of the given connection rule",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/paths/~1rest~1attributetype~1%7Bid%7D~1attributes~1count/get/responses/200/content/text~1plain/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/connectionrule/upperItemType/{upperId}/connectionType/{connectionType}/lowerItemType/{lowerId}": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1connectionrules~1forUpperItemType~1%7BupperId%7D/parameters/0"
        },
        {
          "$ref": "#/paths/~1rest~1itemtypes~1forUpper~1%7Bid%7D~1connectionType~1%7BconnectionType%7D/parameters/1"
        },
        {
          "$ref": "#/paths/~1rest~1connectionrules~1forLowerItemType~1%7BlowerId%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Returns a single connection rule defined by its unique content.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1connectionrules/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/connectionrules": {
      "get": {
        "summary": "Return all connection rule objects as an array",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "additionalProperties": false,
                  "items": {
                    "$ref": "#/paths/~1rest~1connectionrule~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/connectionrules/forItemType/{id}": {
      "get": {
        "summary": "Return all connection rule objects that belong to the given item type in any position as an array",
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1connectionrules/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/connectionrules/forUpperItemType/{upperId}/forLowerItemType/{lowerId}": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1connectionrules~1forUpperItemType~1%7BupperId%7D/parameters/0"
        },
        {
          "$ref": "#/paths/~1rest~1connectionrules~1forLowerItemType~1%7BlowerId%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Returns all connection rules that exists between two item types as an array",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1connectionrules/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/connectionrules/forUpperItemType/{upperId}": {
      "parameters": [
        {
          "name": "upperId",
          "in": "path",
          "required": true,
          "description": "Id of the upper item or item type",
          "schema": {
            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
          }
        }
      ],
      "get": {
        "summary": "Returns all connection rules that contain the given upper item type",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1connectionrules/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/connectionrules/forLowerItemType/{lowerId}": {
      "parameters": [
        {
          "name": "lowerId",
          "in": "path",
          "required": true,
          "description": "Id of the lower item or item type",
          "schema": {
            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
          }
        }
      ],
      "get": {
        "summary": "Returns all connection rules that that contain the given lower item type",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1connectionrules/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/metaData": {
      "get": {
        "summary": "Return all meta data objects in one huge object, for performance reasons",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "attributeGroups": {
                      "$ref": "#/paths/~1rest~1attributegroups/get/responses/200/content/application~1json/schema"
                    },
                    "attributeTypes": {
                      "$ref": "#/paths/~1rest~1attributetypes/get/responses/200/content/application~1json/schema"
                    },
                    "connectionTypes": {
                      "$ref": "#/paths/~1rest~1connectiontypes/get/responses/200/content/application~1json/schema"
                    },
                    "itemTypes": {
                      "$ref": "#/paths/~1rest~1itemtypes/get/responses/200/content/application~1json/schema"
                    },
                    "connectionRules": {
                      "$ref": "#/paths/~1rest~1connectionrules/get/responses/200/content/application~1json/schema"
                    },
                    "userRole": {
                      "$ref": "#/paths/~1rest~1user~1role/get/responses/200/content/application~1json/schema"
                    },
                    "userName": {
                      "$ref": "#/paths/~1login/post/requestBody/content/application~1json/schema/properties/accountName"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/user": {
      "summary": "Manager credentials",
      "post": {
        "summary": "Create credential",
        "requestBody": {
          "description": "Data for the new user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1rest~1user/put/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1user/put/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      },
      "put": {
        "summary": "Update credential",
        "requestBody": {
          "description": "Updated user data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Object with user credentials",
                "additionalProperties": false,
                "properties": {
                  "accountName": {
                    "$ref": "#/paths/~1login/post/requestBody/content/application~1json/schema/properties/accountName"
                  },
                  "role": {
                    "$ref": "#/paths/~1rest~1user~1role/get/responses/200/content/application~1json/schema"
                  },
                  "passphrase": {
                    "$ref": "#/paths/~1login/post/requestBody/content/application~1json/schema/properties/passphrase"
                  }
                },
                "required": [
                  "accountName",
                  "role"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Object with data about a user",
                  "additionalProperties": false,
                  "properties": {
                    "accountName": {
                      "$ref": "#/paths/~1login/post/requestBody/content/application~1json/schema/properties/accountName"
                    },
                    "role": {
                      "$ref": "#/paths/~1rest~1user~1role/get/responses/200/content/application~1json/schema"
                    },
                    "roleName": {
                      "type": "string",
                      "enum": [
                        "Reader",
                        "Editor",
                        "Administrator"
                      ]
                    }
                  },
                  "required": [
                    "accountName",
                    "role"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "description": "not admin user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1login/post/responses/401/content/application~1json/schema"
                }
              }
            }
          },
          "404": {
            "description": "object not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1login/post/responses/401/content/application~1json/schema"
                }
              }
            }
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/user/current": {
      "get": {
        "summary": "Returns information about the user currently authenticated",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1user/put/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/user/role": {
      "get": {
        "summary": "Returns the role of the currently authenticated user",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "enum": [
                    0,
                    1,
                    2
                  ],
                  "description": "User role: 0 - Reader, 1 - Editor, 2 - Administrator"
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/users": {
      "get": {
        "summary": "Returns all users as an array",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Array of user info objects",
                  "items": {
                    "$ref": "#/paths/~1rest~1user/put/responses/200/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/users/search/{text}": {
      "get": {
        "summary": "Returns a list of users where the account name matches a part of the given text.",
        "parameters": [
          {
            "name": "text",
            "in": "path",
            "required": true,
            "description": "search text",
            "schema": {
              "type": "string",
              "maxLength": 1000,
              "pattern": "^.*$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1users/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationItem": {
      "post": {
        "summary": "Create a new Configuration item",
        "requestBody": {
          "description": "Data for the new configuration item",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A configuration item object for creating.",
                "additionalProperties": true,
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255,
                    "pattern": "^.*$",
                    "description": "Name of the configuration item"
                  },
                  "typeId": {
                    "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                    "description": "Id of the item type"
                  },
                  "attributes": {
                    "type": "array",
                    "description": "Attributes of the item",
                    "items": {
                      "type": "object",
                      "description": "Data for the new attribute",
                      "additionalProperties": false,
                      "properties": {
                        "typeId": {
                          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                          "description": "Id of the attribute type, must be allowd by the item type"
                        },
                        "value": {
                          "type": "string",
                          "maxLength": 1000,
                          "pattern": "^.*$",
                          "description": "Attribute value"
                        }
                      }
                    }
                  },
                  "links": {
                    "type": "array",
                    "description": "Links to external websites for the item",
                    "items": {
                      "type": "object",
                      "description": "Data for the new link",
                      "additionalProperties": false,
                      "properties": {
                        "uri": {
                          "type": "string",
                          "maxLength": 1000,
                          "format": "url",
                          "pattern": "^https?://.*$",
                          "description": "Url of the link, must be http or https"
                        },
                        "description": {
                          "$ref": "#/paths/~1rest~1connection~1%7Bid%7D~1description/put/requestBody/content/application~1json/schema/properties/description",
                          "description": "Description for the uri"
                        }
                      }
                    }
                  },
                  "users": {
                    "type": "array",
                    "description": "List of the users that are responsible for the item, i.e. are able to change it",
                    "items": {
                      "$ref": "#/paths/~1login/post/requestBody/content/application~1json/schema/properties/accountName"
                    }
                  }
                },
                "required": [
                  "name",
                  "typeId"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1configurationItem~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationItem/full": {
      "post": {
        "summary": "Create a new Configuration item with connections",
        "requestBody": {
          "description": "Data for the new configuration item",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 255,
                    "pattern": "^.*$",
                    "description": "Name of the configuration item, unique for each item type"
                  },
                  "typeId": {
                    "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                    "description": "Id of the item type"
                  },
                  "attributes": {
                    "type": "array",
                    "description": "Attributes of the item",
                    "items": {
                      "type": "object",
                      "description": "Data for the new attribute",
                      "additionalProperties": false,
                      "properties": {
                        "typeId": {
                          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                          "description": "Id of the attribute type, must be allowd by the item type"
                        },
                        "value": {
                          "$ref": "#/paths/~1rest~1configurationItem/post/requestBody/content/application~1json/schema/properties/attributes/items/properties/value"
                        }
                      }
                    }
                  },
                  "links": {
                    "type": "array",
                    "description": "Links to external websites for the item",
                    "items": {
                      "type": "object",
                      "description": "Data for the new link",
                      "additionalProperties": false,
                      "properties": {
                        "uri": {
                          "$ref": "#/paths/~1rest~1configurationItem/post/requestBody/content/application~1json/schema/properties/links/items/properties/uri"
                        },
                        "description": {
                          "$ref": "#/paths/~1rest~1configurationItem/post/requestBody/content/application~1json/schema/properties/links/items/properties/uri",
                          "description": "Description for the uri"
                        }
                      }
                    }
                  },
                  "users": {
                    "type": "array",
                    "description": "List of the users that are responsible for the item, i.e. are able to change it",
                    "items": {
                      "$ref": "#/paths/~1login/post/requestBody/content/application~1json/schema/properties/accountName"
                    }
                  },
                  "connectionsToUpper": {
                    "type": "array",
                    "description": "Data for full connections to create",
                    "items": {
                      "type": "object",
                      "description": "full connection type",
                      "additionalProperties": false,
                      "properties": {
                        "ruleId": {
                          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                          "description": "Id of the connection rule. Rule must contain given item type as lower item type."
                        },
                        "typeId": {
                          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                          "description": "Id of the connection type. If set, it must be equal to the connection type of the rule."
                        },
                        "targetId": {
                          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                          "description": "Id of the configuration item to connect. Type of the target item must comply to upper item type in connection rule."
                        },
                        "description": {
                          "$ref": "#/paths/~1rest~1connection~1%7Bid%7D~1description/put/requestBody/content/application~1json/schema/properties/description",
                          "description": "Connection description, must match the validation expression of the rule."
                        }
                      }
                    }
                  },
                  "connectionsToLower": {
                    "type": "array",
                    "description": "Data for full connections to create",
                    "items": {
                      "type": "object",
                      "description": "full connection type",
                      "additionalProperties": false,
                      "properties": {
                        "ruleId": {
                          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                          "description": "Id of the connection rule. Rule must contain given item type as upper item type."
                        },
                        "typeId": {
                          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                          "description": "Id of the connection type. If set, it must be equal to the connection type of the rule."
                        },
                        "targetId": {
                          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                          "description": "Id of the configuration item to connect. Type of the target item must comply to lower item type in connection rule."
                        },
                        "description": {
                          "$ref": "#/paths/~1rest~1connection~1%7Bid%7D~1description/put/requestBody/content/application~1json/schema/properties/description",
                          "description": "Connection description, must match the validation expression of the rule."
                        }
                      }
                    }
                  }
                },
                "required": [
                  "name",
                  "typeId"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/paths/~1rest~1configurationItem~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                    },
                    {
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {
                        "connectionsToLower": {
                          "type": "array",
                          "description": "Array of full connections",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "description": "transformed connection object for full configuration items",
                            "properties": {
                              "id": {
                                "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                                "description": "Id of the connection."
                              },
                              "ruleId": {
                                "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                                "description": "Id of the connection rule. Rule must contain given item type as target (upper or lower) item type."
                              },
                              "typeId": {
                                "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                                "description": "Id of the connection type. If set, it must be equal to the connection type of the rule."
                              },
                              "type": {
                                "type": "string",
                                "maxLength": 1000,
                                "pattern": "^.*$",
                                "description": "Name of the connection type in the target's direction, i.e. forward for connections to lower and reverse for connections to upper."
                              },
                              "targetId": {
                                "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                                "description": "Id of the configuration item to connect. Type of the target item must comply to target item type in connection rule."
                              },
                              "targetTypeId": {
                                "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                                "description": "Id of the item type of the connection rule."
                              },
                              "targetName": {
                                "type": "string",
                                "maxLength": 255,
                                "pattern": "^.*$",
                                "description": "Name of the target configuration item."
                              },
                              "targetColor": {
                                "$ref": "#/paths/~1rest~1itemtype/post/requestBody/content/application~1json/schema/properties/backColor",
                                "description": "Color code of the target item type"
                              },
                              "description": {
                                "type": "string",
                                "maxLength": 1000,
                                "pattern": "^.*$",
                                "description": "Connection description, must match the validation expression of the rule."
                              }
                            },
                            "required": [
                              "id",
                              "ruleId",
                              "targetId",
                              "description"
                            ]
                          }
                        },
                        "connectionsToUpper": {
                          "type": "array",
                          "description": "Array of full connections",
                          "items": {
                            "$ref": "#/paths/~1rest~1configurationItem~1full/post/responses/201/content/application~1json/schema/allOf/1/properties/connectionsToLower/items"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationItem/{id}": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Get a single configuration item by id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1configurationItem~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      },
      "put": {
        "summary": "Update the configuration item",
        "requestBody": {
          "description": "Updated configuration item",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "A configuration item object",
                "allOf": [
                  {
                    "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/put/requestBody/content/application~1json/schema/allOf/0"
                  },
                  {
                    "$ref": "#/paths/~1rest~1configurationItem/post/requestBody/content/application~1json/schema"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1configurationItem~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "304": {
            "description": "nothing changed"
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Delete the configuration item type",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1configurationItem~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationItem/{id}/Search": {
      "post": {
        "summary": "Search for specific items along connections, beginning at the given configuration item type",
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
          }
        ],
        "requestBody": {
          "description": "Content for the search criteria",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Search parameters",
                "additionalProperties": false,
                "properties": {
                  "itemTypeId": {
                    "description": "Id of the item type to search",
                    "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
                  },
                  "maxLevels": {
                    "type": "integer",
                    "description": "Maximum of levels to search",
                    "minimum": 1,
                    "maximum": 10
                  },
                  "searchDirection": {
                    "type": "string",
                    "description": "Direction for the search",
                    "enum": [
                      "up",
                      "down",
                      "both"
                    ]
                  },
                  "extraSearch": {
                    "description": "Extra filter conditions for the result",
                    "$ref": "#/paths/~1rest~1configurationitems~1search/post/requestBody/content/application~1json/schema"
                  }
                },
                "required": [
                  "itemTypeId",
                  "maxLevels",
                  "searchDirection"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Array with an object of items that were found.",
                  "items": {
                    "type": "object",
                    "description": "A neighbor search result, containing a configuration item",
                    "additionalProperties": false,
                    "properties": {
                      "level": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 10,
                        "description": "Levels apart from the origin item"
                      },
                      "path": {
                        "type": "string",
                        "description": "Path from the origin item that leads to this item",
                        "pattern": "^([a-z0-9]{1,10} ?(->)?)*$",
                        "maxLength": 1000
                      },
                      "direction": {
                        "type": "integer",
                        "description": "Direction, in which the path was created. -1 = up, 0 = both, 1 = down",
                        "enum": [
                          -1,
                          0,
                          1
                        ]
                      },
                      "id": {
                        "description": "Id of the item.",
                        "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/put/requestBody/content/application~1json/schema/allOf/0"
                      },
                      "item": {
                        "description": "The item that was found.",
                        "$ref": "#/paths/~1rest~1configurationItem~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                      },
                      "fullItem": {
                        "description": "The item that was found, together with all connections.",
                        "$ref": "#/paths/~1rest~1configurationItem~1full/post/responses/201/content/application~1json/schema"
                      }
                    },
                    "required": [
                      "level",
                      "path",
                      "direction",
                      "id",
                      "item",
                      "fullItem"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationItem/{id}/full": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Get a configuration item with connections by id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1configurationItem~1full/post/responses/201/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationItem/{id}/history": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Get a configuration item's history by id, even for deleted items",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "An object representing all historic states of a configuration item",
                  "additionalProperties": false,
                  "properties": {
                    "item": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "id": {
                          "description": "Unique id of the item.",
                          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
                        },
                        "typeId": {
                          "description": "Id of the item type.",
                          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
                        },
                        "type": {
                          "$ref": "#/paths/~1rest~1itemtype/post/requestBody/content/application~1json/schema/properties/name",
                          "description": "Name of the item type."
                        },
                        "lastChange": {
                          "description": "Date and time when the item was last changed.",
                          "$ref": "#/paths/~1rest~1configurationitems~1search/post/requestBody/content/application~1json/schema/properties/changedAfter"
                        },
                        "changedBy": {
                          "$ref": "#/paths/~1login/post/requestBody/content/application~1json/schema/properties/accountName"
                        },
                        "deleted": {
                          "type": "boolean",
                          "description": "Whether the original item was deleted."
                        },
                        "oldVersions": {
                          "type": "array",
                          "description": "Data objects with all old versions of the item.",
                          "items": {
                            "type": "object",
                            "description": "Object containing a historic version of the item.",
                            "additionalProperties": false,
                            "properties": {
                              "name": {
                                "$ref": "#/paths/~1rest~1configurationItem/post/requestBody/content/application~1json/schema/properties/name",
                                "description": "Historic name of the item."
                              },
                              "type": {
                                "$ref": "#/paths/~1rest~1itemtype/post/requestBody/content/application~1json/schema/properties/name",
                                "description": "Historic type name of the item."
                              },
                              "changedAt": {
                                "description": "Date, when the change to this version occured.",
                                "$ref": "#/paths/~1rest~1configurationitems~1search/post/requestBody/content/application~1json/schema/properties/changedAfter"
                              },
                              "attributes": {
                                "type": "array",
                                "description": "Array with attribute objects.",
                                "items": {
                                  "type": "object",
                                  "description": "An object with a historic attribute.",
                                  "additionalProperties": false,
                                  "properties": {
                                    "typeId": {
                                      "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                                      "description": "Id of the attribute type"
                                    },
                                    "type": {
                                      "$ref": "#/paths/~1rest~1itemtype/post/requestBody/content/application~1json/schema/properties/name",
                                      "description": "Historic type name of the attribute."
                                    },
                                    "value": {
                                      "$ref": "#/paths/~1rest~1configurationItem/post/requestBody/content/application~1json/schema/properties/attributes/items/properties/value",
                                      "description": "Historic value of the attribute."
                                    }
                                  }
                                }
                              },
                              "links": {
                                "type": "array",
                                "description": "Array with hyperlinks.",
                                "items": {
                                  "type": "object",
                                  "description": "An object with a historic link to an external web page.",
                                  "additionalProperties": false,
                                  "properties": {
                                    "uri": {
                                      "$ref": "#/paths/~1rest~1configurationItem/post/requestBody/content/application~1json/schema/properties/links/items/properties/uri",
                                      "description": "Historic link address."
                                    },
                                    "description": {
                                      "$ref": "#/paths/~1rest~1connection~1%7Bid%7D~1description/put/requestBody/content/application~1json/schema/properties/description",
                                      "description": "Historic link description."
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "connectionsToLower": {
                      "type": "array",
                      "description": "Array of objects with historic connections that belonged to the item as upper item.",
                      "items": {
                        "type": "object",
                        "description": "Object that contains historic connections",
                        "additionalProperties": false,
                        "properties": {
                          "id": {
                            "description": "Unique id of the connection.",
                            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
                          },
                          "ruleId": {
                            "description": "Id of the connection rule.",
                            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
                          },
                          "typeId": {
                            "description": "Id of the connection type.",
                            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
                          },
                          "typeName": {
                            "$ref": "#/paths/~1rest~1itemtype/post/requestBody/content/application~1json/schema/properties/name",
                            "description": "Historic name of the connection type."
                          },
                          "reverseName": {
                            "$ref": "#/paths/~1rest~1itemtype/post/requestBody/content/application~1json/schema/properties/name",
                            "description": "Historic reverse name of the connection type for the reverse direction."
                          },
                          "upperItemId": {
                            "description": "Id of the upper configuration item.",
                            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
                          },
                          "lowerItemId": {
                            "description": "Id of the lower configuration item.",
                            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
                          },
                          "lastChange": {
                            "description": "Date, when the last change occured",
                            "$ref": "#/paths/~1rest~1configurationitems~1search/post/requestBody/content/application~1json/schema/properties/changedAfter"
                          },
                          "deleted": {
                            "type": "boolean",
                            "description": "Whether the original connections was deleted"
                          },
                          "descriptions": {
                            "type": "array",
                            "description": "List of the historic descriptions of the connections, since only that can be changed.",
                            "items": {
                              "$ref": "#/paths/~1rest~1connection~1%7Bid%7D~1description/put/requestBody/content/application~1json/schema/properties/description",
                              "description": "Historic description"
                            }
                          }
                        }
                      }
                    },
                    "connectionsToUpper": {
                      "type": "array",
                      "description": "Array of objects with historic connections that belonged to the item as lower item.",
                      "items": {
                        "type": "object",
                        "description": "Object that contains historic connections",
                        "additionalProperties": false,
                        "properties": {
                          "id": {
                            "description": "Unique id of the connection.",
                            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
                          },
                          "ruleId": {
                            "description": "Id of the connection rule.",
                            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
                          },
                          "typeId": {
                            "description": "Id of the connection type.",
                            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
                          },
                          "typeName": {
                            "$ref": "#/paths/~1rest~1itemtype/post/requestBody/content/application~1json/schema/properties/name",
                            "description": "Historic name of the connection type."
                          },
                          "reverseName": {
                            "$ref": "#/paths/~1rest~1itemtype/post/requestBody/content/application~1json/schema/properties/name",
                            "description": "Historic reverse name of the connection type for the reverse direction."
                          },
                          "upperItemId": {
                            "description": "Id of the upper configuration item.",
                            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
                          },
                          "lowerItemId": {
                            "description": "Id of the lower configuration item.",
                            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
                          },
                          "lastChange": {
                            "description": "Date, when the last change occured",
                            "$ref": "#/paths/~1rest~1configurationitems~1search/post/requestBody/content/application~1json/schema/properties/changedAfter"
                          },
                          "descriptions": {
                            "type": "array",
                            "description": "List of the historic descriptions of the connections, since only that can be changed.",
                            "items": {
                              "$ref": "#/paths/~1rest~1connection~1%7Bid%7D~1description/put/requestBody/content/application~1json/schema/properties/description",
                              "description": "Historic description"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationitem/type/{itemTypeId}/name/{name}": {
      "parameters": [
        {
          "name": "itemTypeId",
          "in": "path",
          "required": true,
          "description": "Id of an item type",
          "schema": {
            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
          }
        },
        {
          "name": "name",
          "in": "path",
          "required": true,
          "description": "name of an item or type",
          "schema": {
            "type": "string",
            "maxLength": 1000,
            "pattern": "^.*$"
          }
        }
      ],
      "get": {
        "summary": "Returns an item that matches the given item type and name.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1configurationItem~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationItem/{id}/responsibility": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        }
      ],
      "post": {
        "summary": "Take responsibility for the item.",
        "deprecated": true,
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1configurationItem~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "304": {
            "description": "nothing changed"
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Abandon responsibility for the item.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1configurationItem~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                }
              }
            }
          },
          "304": {
            "description": "nothing changed"
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationItem/{id}/connections": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Get a configuration item's connections",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Array with connection objects belonging to the given item",
                  "items": {
                    "$ref": "#/paths/~1rest~1connection/post/responses/201/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationItem/{id}/connections/toUpper": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Get a configuration item's connections to items above the current",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1configurationItem~1%7Bid%7D~1connections/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationItem/{id}/connections/toLower": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Get a configuration item's connections below the current item",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1configurationItem~1%7Bid%7D~1connections/get/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationItems": {
      "get": {
        "summary": "Get all configuration items",
        "parameters": [
          {
            "name": "page",
            "allowEmptyValue": true,
            "required": false,
            "description": "Starting page for retrieving items, in portions of 1000 at max",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Returns a portion of the whole number of configuration items.",
                  "additionalProperties": false,
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "Array with connection objects belonging to the given item",
                      "maxItems": 1000,
                      "items": {
                        "$ref": "#/paths/~1rest~1configurationItem~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                      }
                    },
                    "totalItems": {
                      "type": "integer",
                      "description": "Number of all items to be found. If it is greater than the count of the items array, then more pages can be retrieved.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationItems/full": {
      "get": {
        "summary": "Get all configuration items",
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1configurationItems/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Returns a portion of the whole number of configuration items with connections.",
                  "additionalProperties": false,
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "Array with connection objects belonging to the given item",
                      "maxLength": 1000,
                      "items": {
                        "$ref": "#/paths/~1rest~1configurationItem~1full/post/responses/201/content/application~1json/schema"
                      }
                    },
                    "totalItems": {
                      "type": "integer",
                      "description": "Number of all items to be found. If it is greater than the count of the items array, then more pages can be retrieved.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationitems/recent/{listcount}": {
      "get": {
        "summary": "Get the most recently changed configuration items with a maximum given in the parameter.",
        "parameters": [
          {
            "name": "listcount",
            "required": true,
            "description": "Number of items expected.",
            "in": "path",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Array with items and connection objects belonging to each item",
                  "maxLength": 100,
                  "items": {
                    "$ref": "#/paths/~1rest~1configurationItem~1full/post/responses/201/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationitems/search": {
      "post": {
        "summary": "performs a search for configuration items in the database and returns a list with results.",
        "requestBody": {
          "description": "Search criteria to filter the list",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Search criteria. At least one of the properties nameOrValue, itemTypeId or attributes must be set.",
                "additionalProperties": false,
                "properties": {
                  "nameOrValue": {
                    "type": "string",
                    "description": "Part of a configuration item name or attribute value to search for.",
                    "maxLength": 1000,
                    "pattern": "^.*$"
                  },
                  "itemTypeId": {
                    "description": "Id of an item type to be searched for. If this object is used inside a neighbor search, it must be identical to the other item type id.",
                    "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
                  },
                  "attributes": {
                    "type": "array",
                    "description": "Array of attribute types and values to search for.",
                    "items": {
                      "type": "object",
                      "description": "An object with attribute information to search for.",
                      "additionalProperties": false,
                      "properties": {
                        "typeId": {
                          "description": "Id of the attribute type to search for",
                          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
                        },
                        "value": {
                          "$ref": "#/paths/~1rest~1configurationItem/post/requestBody/content/application~1json/schema/properties/attributes/items/properties/value",
                          "description": "Value of the attribute type, if empty, search for non existent items, value can be negated with leading exclamation mark."
                        }
                      },
                      "required": [
                        "typeId",
                        "value"
                      ]
                    }
                  },
                  "connectionsToUpper": {
                    "type": "array",
                    "description": "Array of connection criteria to search for.",
                    "items": {
                      "type": "object",
                      "description": "An object with connection information to search for.",
                      "additionalProperties": false,
                      "properties": {
                        "connectionTypeId": {
                          "description": "Id of the connection type, that a searched item must possess.",
                          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
                        },
                        "itemTypeId": {
                          "description": "Optional. Id of the item type, that the connection must have.",
                          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
                        },
                        "count": {
                          "type": "string",
                          "description": "Number of connections, that an item must possess. 0 = none, 1 = one, 1+ = at least one, 2+ = more than one.",
                          "enum": [
                            "0",
                            "1",
                            "1+",
                            "2+"
                          ]
                        }
                      },
                      "required": [
                        "connectionTypeId",
                        "count"
                      ]
                    }
                  },
                  "connectionsToLower": {
                    "type": "array",
                    "description": "Array of connection criteria to search for.",
                    "items": {
                      "type": "object",
                      "description": "An object with connection information to search for.",
                      "additionalProperties": false,
                      "properties": {
                        "connectionTypeId": {
                          "description": "Id of the connection type, that a searched item must possess.",
                          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
                        },
                        "itemTypeId": {
                          "description": "Optional. Id of the item type, that the connection must have.",
                          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
                        },
                        "count": {
                          "type": "string",
                          "description": "Number of connections, that an item must possess. 0 = none, 1 = one, 1+ = at least one, 2+ = more than one.",
                          "enum": [
                            "0",
                            "1",
                            "1+",
                            "2+"
                          ]
                        }
                      },
                      "required": [
                        "connectionTypeId",
                        "count"
                      ]
                    }
                  },
                  "changedAfter": {
                    "description": "A date, after that the item was changed.",
                    "type": "string",
                    "maxLength": 24,
                    "format": "date",
                    "pattern": "^\\d{2}([./-])\\d{2}\\1\\d{4}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$"
                  },
                  "changedBefore": {
                    "description": "A date, after which the item was not changed anymore.",
                    "$ref": "#/paths/~1rest~1configurationitems~1search/post/requestBody/content/application~1json/schema/properties/changedAfter"
                  },
                  "responsibleUser": {
                    "$ref": "#/paths/~1login/post/requestBody/content/application~1json/schema/properties/accountName"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "List of configuration items that match the given criteria.",
                  "items": {
                    "$ref": "#/paths/~1rest~1configurationItem~1%7Bid%7D/put/requestBody/content/application~1json/schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationitems/full/search": {
      "post": {
        "summary": "performs a search for configuration items in the database and returns a list with results, including the connections.",
        "requestBody": {
          "description": "Search criteria to filter the list",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1rest~1configurationitems~1search/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1configurationitems~1search/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationitems/{idList}": {
      "get": {
        "summary": "Get all configurations items with the given ids. If an id cannot be found, no error is thrown.",
        "parameters": [
          {
            "name": "idList",
            "required": true,
            "description": "Single mongo id or comma separated list of ids.",
            "in": "path",
            "schema": {
              "type": "string",
              "maxLength": 1000,
              "pattern": "^[a-f0-9,]*$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1configurationitems~1search/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationitems/{idList}/full": {
      "get": {
        "summary": "Get all configurations items with their connections with the given ids. If an id cannot be found, no error is thrown.",
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1configurationitems~1%7BidList%7D/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationitems/byTypes/{idList}": {
      "get": {
        "summary": "Get all configurations items that belong to the given type(s).",
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1configurationitems~1%7BidList%7D/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1configurationitems~1search/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationitems/byTypes/{idList}/full": {
      "get": {
        "summary": "Get all configurations items with their connections, that belong to the given type(s).",
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1configurationitems~1%7BidList%7D/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1configurationitems~1search/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationitems/available/{ruleId}/{count}": {
      "get": {
        "summary": "Returns configuration items that are not connected due to the given rule or whose connections count plus the given count doesn't exceed the allowed range.",
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "description": "Id of the connection rule",
            "schema": {
              "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema"
            }
          },
          {
            "name": "count",
            "required": true,
            "description": "Number of items to be connected to.",
            "in": "path",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 9999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1configurationitems~1search/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationitems/connectableAsLowerItem/rule/{ruleId}": {
      "get": {
        "summary": "Returns configuration items that are connectable as lower item for the given rule.",
        "description": "That means, they are of the appropriate type and do have at least one free connection.",
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1configurationitems~1available~1%7BruleId%7D~1%7Bcount%7D/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1configurationitems~1search/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationitems/connectableAsLowerItem/{id}/rule/{ruleId}": {
      "get": {
        "summary": "Returns configuration items that are connectable as lower item for the given configuration item and rule.",
        "description": "That means, they are of the appropriate type, do have at least one free connection and are not already connected to the current item.",
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
          },
          {
            "$ref": "#/paths/~1rest~1configurationitems~1available~1%7BruleId%7D~1%7Bcount%7D/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1configurationitems~1search/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/configurationitems/connectableAsUpperItem/{id}/rule/{ruleId}": {
      "get": {
        "summary": "Returns configuration items that are connectable as upper item for the given configuration item and rule.",
        "description": "That means, they are of the appropriate type, do have at least one free connection and are not already connected to the current item.",
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
          },
          {
            "$ref": "#/paths/~1rest~1configurationitems~1available~1%7BruleId%7D~1%7Bcount%7D/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1configurationitems~1search/post/responses/200/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/connection": {
      "post": {
        "summary": "Create a new connection",
        "requestBody": {
          "description": "Data for the new connection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A connection object for creating, linking two configuration items together in a hierarchy",
                "additionalProperties": true,
                "properties": {
                  "typeId": {
                    "description": "Id of the connection type.",
                    "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/put/requestBody/content/application~1json/schema/allOf/0"
                  },
                  "ruleId": {
                    "description": "Id of the connection rule.",
                    "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/put/requestBody/content/application~1json/schema/allOf/0"
                  },
                  "upperItem": {
                    "description": "Id of the configuration item in the upper position.",
                    "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/put/requestBody/content/application~1json/schema/allOf/0"
                  },
                  "lowerItem": {
                    "description": "Id of the configuration item in the lower position.",
                    "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/put/requestBody/content/application~1json/schema/allOf/0"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "pattern": "^.*$",
                    "description": "Description of the connection, must match the validation expression of the connection rule."
                  }
                },
                "required": [
                  "typeId",
                  "ruleId",
                  "upperItem",
                  "lowerItem",
                  "description"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A connection object, linking two configuration items together in a hierarchy",
                  "allOf": [
                    {
                      "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/put/requestBody/content/application~1json/schema/allOf/0"
                    },
                    {
                      "$ref": "#/paths/~1rest~1connection/post/requestBody/content/application~1json/schema"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/connection/{id}": {
      "parameters": [
        {
          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
        }
      ],
      "get": {
        "summary": "Get a single connection by id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1connection/post/responses/201/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Delete the connection",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1connection/post/responses/201/content/application~1json/schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/connection/{id}/description": {
      "put": {
        "summary": "Update the connection description",
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0"
          }
        ],
        "requestBody": {
          "description": "Updated connection description",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Description data",
                "additionalProperties": false,
                "properties": {
                  "description": {
                    "description": "Update description",
                    "type": "string",
                    "maxLength": 1000,
                    "pattern": "^.*$"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1rest~1connection/post/responses/201/content/application~1json/schema"
                }
              }
            }
          },
          "304": {
            "description": "nothing changed"
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/connections": {
      "get": {
        "summary": "Return a portion of the whole number of connection objects as an array",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Object with connections",
                  "additionalProperties": false,
                  "properties": {
                    "connections": {
                      "type": "array",
                      "additionalProperties": false,
                      "description": "Array of connection objects",
                      "maxItems": 1000,
                      "items": {
                        "$ref": "#/paths/~1rest~1connection/post/responses/201/content/application~1json/schema"
                      }
                    },
                    "totalConnections": {
                      "type": "number",
                      "description": "Total number of connections in database",
                      "minimum": 0
                    }
                  },
                  "required": [
                    "connections",
                    "totalConnections"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/import/convertFileToTable": {
      "post": {
        "summary": "Uploads an XLSX or CSV file and converts it into a JSON structure",
        "requestBody": {
          "description": "XLSX or CSV file with a workbook name",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "workbook": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "fileName": {
                      "type": "string",
                      "format": "filename",
                      "maxLength": 1000,
                      "pattern": "^.*$"
                    },
                    "fileType": {
                      "type": "string",
                      "maxLength": 100,
                      "pattern": "^[a-zA-Z0-9/-]*$"
                    },
                    "sheets": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "name": {
                            "type": "string",
                            "maxLength": 1000,
                            "pattern": "^.*$"
                          },
                          "lines": {
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "maxLength": 1000,
                                "pattern": "^.*$"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1user/put/responses/404"
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    },
    "/rest/import/dataTable": {
      "put": {
        "summary": "Imports objects from a table of data",
        "requestBody": {
          "description": "A table that has the column descriptions and cells with data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "itemTypeId": {
                    "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                    "description": "Unique id of the item type that will be imported"
                  },
                  "columns": {
                    "type": "array",
                    "minLength": 1,
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "targetType": {
                          "type": "string",
                          "enum": [
                            "name",
                            "attribute",
                            "connection to upper",
                            "connection to lower",
                            "linkdescription",
                            "linkaddress"
                          ],
                          "description": "Type of the column to be imported"
                        },
                        "targetId": {
                          "$ref": "#/paths/~1rest~1itemtype~1%7Bid%7D/parameters/0/schema",
                          "description": "Unique id of the item or attribute that will be imported"
                        }
                      },
                      "required": [
                        "targetType"
                      ]
                    }
                  },
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "maxLength": 1000,
                        "pattern": "^.*$",
                        "description": "Name of the item to connect to, value of the attribute or link address or description"
                      }
                    }
                  }
                },
                "required": [
                  "itemTypeId",
                  "columns",
                  "rows"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "index": {
                        "type": "integer",
                        "format": "int64",
                        "minimum": 1,
                        "description": "Line number"
                      },
                      "message": {
                        "type": "string",
                        "maxLength": 1000,
                        "pattern": "^.*$",
                        "description": "Result of the action that was performed"
                      },
                      "subject": {
                        "type": "string",
                        "maxLength": 1000,
                        "pattern": "^.*$",
                        "description": "Object that was used"
                      },
                      "details": {
                        "type": "string",
                        "maxLength": 1000,
                        "pattern": "^.*$",
                        "description": "More information about the action"
                      },
                      "severity": {
                        "type": "integer",
                        "enum": [
                          0,
                          1,
                          2,
                          3
                        ],
                        "description": "Severity of the message: 0 = info, 1 = warning, 2 = error (line could not be imported completely), 3 = fatal (stopped import)"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1login/post/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1login/post/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1user/put/responses/403"
          },
          "415": {
            "$ref": "#/paths/~1login/post/responses/415"
          },
          "default": {
            "$ref": "#/paths/~1login/get/responses/default"
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "bearerFormat": "JWT",
        "scheme": "bearer"
      }
    }
  }
}
